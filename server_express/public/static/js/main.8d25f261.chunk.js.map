{"version":3,"sources":["actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/TodoListTemplate.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["FETCH_TODOS","ADD_TODO","REMOVE_TODO","TOGGLE_TODO","apiUrl","process","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","className","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","TodoListTemplate","form","children","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","types","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d25f261.chunk.js","sourcesContent":["import axios from 'axios';\n\n//Action type 정의\nexport const FETCH_TODOS = \"FETCH_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n\nconst apiUrl = process.env.REACT_APP_API_URL\n\n// 1. TODO 리스트\nexport const fetchAllTodos = () => {\n    return (dispatch) => {\n        axios.get(apiUrl)\n            .then(res => {\n                dispatch({\n                    // 요청이 성공하면, 서버 응답내용을 payload로 설정하여\n                    // FETCH_TODOS 액션을 디스패치 합니다.\n                    type: FETCH_TODOS,\n                    payload: res.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n                throw (error);\n            })\n    }\n}\n\n// 2. TODO 등록\nexport const addTodo = (todo) => {\n    return (dispatch) => {\n        axios.post(apiUrl, todo)\n            .then(res => {\n                dispatch({\n                    type: ADD_TODO,\n                    payload: res.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n                throw (error);\n            })\n    }\n}\n\n// 3. TODO 삭제\nexport const removeTodo = id => {\n    return (dispatch) => {\n        axios.delete(`${apiUrl}/${id}`)\n            .then(res => {\n                dispatch({\n                    type: REMOVE_TODO,\n                    payload: res.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n                throw (error);\n            })\n    }\n}\n\n// 4. TODO 수정\nexport const toggleTodo = todo => {\n    return (dispatch) => {\n        axios.put(`${apiUrl}/${todo.id}`, todo)\n            .then(res => {\n                dispatch({\n                    type: TOGGLE_TODO,\n                    payload: res.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n                throw (error);\n            })\n    }\n}","import React, { Component } from 'react';\nimport './Form.css';\n\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nclass Form extends Component {\n\n    state = {\n        todo: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            todo: e.target.value // todo 의 다음 바뀔 값\n        });\n    };\n\n    handleCreate = () => {\n        // const { todo, todos } = this.state;\n        const { todo } = this.state;\n        // action 함수 호출\n        this.props.addTodo(\n            {\n                text: todo,\n                checked: false,\n            });\n        this.setState({\n            todo: '', // todo 초기화\n        });\n    };\n\n    handleKeyPress = (e) => {\n        // 눌려짂 키가 Enter 이면 handleCreate 호출\n        if (e.key === 'Enter') {\n            this.handleCreate();\n        }\n    };\n\n    render() {\n        // const { todo, myChange, myKeyPress, myCreate } = this.props;\n        const { todo } = this.state;\n        const { handleChange, handleCreate, handleKeyPress } = this;\n        return (\n            <div className=\"form\">\n                {/* <input value={todo} onChange={myChange}\n                    onKeyPress={myKeyPress} />\n                <div className=\"create-button\" onClick={myCreate}>\n                    추가\n                </div> */}\n                <input value={todo} onChange={handleChange}\n                    onKeyPress={handleKeyPress} />\n                <div className=\"create-button\" onClick={handleCreate}>\n                    추가\n                </div>\n            </div>\n        );\n    }\n}\n\n// export default Form;\nexport default connect(null, {addTodo})(Form);","import React, { Component } from 'react';\nimport './TodoItem.css';\n\nimport { connect } from 'react-redux';\nimport { removeTodo, toggleTodo } from '../actions';\n\nclass TodoItem extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.checked !== nextProps.checked;\n    }\n\n    handleRemove = (id) => {\n        this.props.removeTodo(id);\n    }\n\n    handleToggle = (todo) => {\n        this.props.toggleTodo(todo);\n    }\n\n    render() {\n        // const { text, checked, id, myToggle, myRemove } = this.props;\n        const { text, checked, id } = this.props;\n        const { handleRemove, handleToggle } = this;\n\n        return (\n            // <div className=\"todo-item\" onClick={() => myToggle(id)}>\n            <div className=\"todo-item\" onClick={() => {\n                const todo = { id, text, checked };\n                todo.checked = !todo.checked;\n                handleToggle(todo)\n            }}>\n                <div className=\"remove\" onClick={(e) => {\n                    e.stopPropagation(); // onToggle 이 실행되지 않도록 함\n                    // myRemove(id)\n                    handleRemove(id)\n                }\n                }>&times;</div>\n                <div className={`todo-text ${checked && 'checked'}`}>\n                    <div>{text}</div>\n                </div>\n                {\n                    checked && (<div className=\"check-mark\">✓</div>)\n                }\n            </div>\n        );\n    }\n}\n// export default TodoItem;\nexport default connect(null, { removeTodo, toggleTodo })(TodoItem);","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nimport { connect } from 'react-redux'\nimport { fetchAllTodos } from '../actions'\n\nclass TodoItemList extends Component {\n    // LifeCycle 메서드\n    componentDidMount() {\n        this.props.fetchAllTodos();\n    }\n    // props.todos 변수에 변동 사항이 있는지 체크하여\n    // true면 변동사항이 있는 것 => render() 메서드가 다시 호출 됨\n    // false면 변동사항이 없는 것 => render() 메서드가 다시 호출 되지 않음\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.todos !== nextProps.todos;\n    }\n\n    render() {\n        // const { todos, myToggle, myRemove } = this.props;\n        const { todos } = this.props;\n        const todoList = todos.map(\n            ({ id, text, checked }) => (\n                <TodoItem\n                    id={id}\n                    text={text}\n                    checked={checked}\n                    // myToggle={myToggle}\n                    // myRemove={myRemove}\n                    key={id}\n                />\n            )\n        );\n        return (\n            <div>\n                {todoList}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        todos: state.todos\n    }\n}\n// export TodoItemList;\n// export default connect(mapStateToProps, { fetchAllTodos })(TodoItemList); 와 같음\nexport default connect(mapStateToProps, { fetchAllTodos: fetchAllTodos })(TodoItemList);","import React from 'react';\nimport './TodoListTemplate.css';\nconst TodoListTemplate = ({ form, children }) => {\n    return (\n        <main className=\"todo-list-template\">\n            <div className=\"title\">\n                오늘 할 일 {process.env.REACT_APP_TITLE}\n            </div>\n            <section className=\"form-wrapper\">\n                {form}\n            </section>\n            <section className=\"todos-wrapper\">\n                {children}\n            </section>\n        </main>\n    );\n};\nexport default TodoListTemplate;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport TodoListTemplate from './components/TodoListTemplate';\n\n// const initialTodos = new Array(500).fill(0).map(\n//   (item, idx) => ({ id: idx, text: `일정 ${idx}`, checked: true })\n// );\n\nclass App extends Component {\n  id = 3 // 이미 0,1,2 가 존재하므로 3으로 설정\n  //상태객체\n  // state = {\n    // todo: '',\n    // todos:initialTodos\n    // todos: [\n    //   { id: 0, text: '리액트 소개', checked: false },\n    //   { id: 1, text: '리액트 구조', checked: true },\n    //   { id: 2, text: '리액트 사용', checked: false }\n    // ]\n  // };\n  // handleChange = (e) => {\n  //   this.setState({\n  //     todo: e.target.value // todo 의 다음 바뀔 값\n  //   });\n  // };\n\n  // handleCreate = () => {\n  //   // const { todo, todos } = this.state;\n  //   const { todo } = this.state;\n  //   this.setState({\n  //     todo: '', // todo 초기화\n  //     // concat 을 사용하여 배열에 추가\n  //     // todos: todos.concat({\n  //     //   id: this.id++,\n  //     //   text: todo,\n  //     //   checked: false\n  //     // })\n  //   });\n  // };\n  // handleKeyPress = (e) => {\n  //   // 눌려짂 키가 Enter 이면 handleCreate 호출\n  //   if (e.key === 'Enter') {\n  //     this.handleCreate();\n  //   }\n  // };\n  // handleRemove = (id) => {\n  //   const { todos } = this.state;\n  //   this.setState({\n  //     todos: todos.filter(todo => todo.id !== id)\n  //   });\n  // }\n  // handleToggle = (id) => {\n  //   const { todos } = this.state;\n  //   this.setState({\n  //     todos: todos.map(todo => todo.id === id ? { ...todo, checked: !todo.checked } : todo)\n  //   });\n  // }\n\n  render() {\n    // const { todo, todos } = this.state;\n    // const { handleChange, handleCreate, handleKeyPress, handleRemove, handleToggle } = this;\n\n    return (\n      <div>\n        {/* <TodoListTemplate form={<Form todo={todo}\n          myChange={handleChange}\n          myKeyPress={handleKeyPress}\n          myCreate={handleCreate} />}> */}\n          <TodoListTemplate form={<Form />}>\n          {/* <TodoItemList todos={todos} myRemove={handleRemove} myToggle={handleToggle} /> */}\n          {/* <TodoItemList myRemove={handleRemove} myToggle={handleToggle} /> */}\n          <TodoItemList />\n        </TodoListTemplate>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as types from '../actions';\n\n\n// State 객체\nconst initialState = {\n    // State 변수\n    todos: [\n        {\n            id: 0,\n            text: '',\n            checked: false,\n        }\n    ]\n}\n\n// Reducer 함수\nexport const toDoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.TOGGLE_TODO:\n        case types.REMOVE_TODO:\n        case types.FETCH_TODOS:\n            // ADD_TODO와 같은 return을 가지기 때문에 생략 가능\n            // return Object.assign({}, state, { todos: action.payload });\n        case types.ADD_TODO:\n            return Object.assign({}, state, { todos: action.payload });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { toDoReducer } from './reducers';\n\nconst store = createStore(toDoReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}